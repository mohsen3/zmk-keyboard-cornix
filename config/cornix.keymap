/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <6 4>;
            then-layer = <6>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cb_ltm {
            bindings = <&kp ESC>;
            key-positions = <2 4>;
            layers = <0>;
        };

        cb_enter {
            bindings = <&kp RET>;
            key-positions = <21 19>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
        };

        backword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <15 14>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <14 16>;
        };

        cb_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        cb_minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        cp_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <32 33>;
        };

        cb_eq {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
        };

        cp_plus {
            bindings = <&kp PLUS>;
            key-positions = <33 34>;
        };

        cb_question {
            bindings = <&kp QUESTION>;
            key-positions = <20 21>;
        };

        cb_slash {
            bindings = <&kp KP_SLASH>;
            key-positions = <34 35>;
        };

        cb_cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        cb_copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        cb_paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        cb_paste_list {
            bindings = <&kp LS(LG(V))>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE        &kp Q          &kp W             &kp E             &kp R                &kp T                      &kp Y      &kp U                &kp I              &kp O             &kp P               &kp BACKSPACE
&kp TAB           &hm_l LCTRL A  &hm_l LALT S      &hm_l LGUI D      &hm_shift_l LSHFT F  &kp G                      &kp H      &hm_shift_r RSHFT J  &hm_r RGUI K       &hm_r RALT L      &hm_r RCTRL SEMI    &kp SQT
&kp LEFT_SHIFT    &hm_l LGUI Z   &kp X             &kp C             &kp V                &kp B        &none  &none  &kp N      &kp M                &kp COMMA          &kp DOT           &kp SLASH           &kp BACKSLASH
&kp LEFT_CONTROL  &kp LEFT_ALT   &kp LEFT_COMMAND  &kp LEFT_COMMAND  &mo 2                &lt 1 SPACE                &kp ENTER  &mo 1                &kp RIGHT_COMMAND  &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Navi_layer {
            display-name = "Navi";
            bindings = <
&none         &none  &none           &mmv MOVE_UP    &kp PAGE_UP      &kp PAGE_DOWN                   &mkp MB1  &mkp MB3        &mkp MB2            &msc SCRL_UP         &msc SCRL_DOWN   &none
&bt BT_SEL 0  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP                    &none     &kp LEFT_ARROW  &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT_ARROW  &none
&bt BT_SEL 1  &none  &none           &none           &none            &msc SCRL_DOWN  &trans  &trans  &trans    &kp RC(A)       &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)  &kp RC(E)        &none
&bt BT_SEL 2  &none  &none           &mo 0           &trans           &trans                          &none     &none           &kp N5              &none                &none            &none
            >;
        };

        Num {
            bindings = <
&kp MINUS  &kp N1     &kp N2          &kp N3            &kp N4     &kp N5                   &kp LS(CARET)   &kp LS(AMPS)     &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)   &trans
&kp PLUS   &kp N6     &kp N7          &kp N8            &kp N9     &kp N0                   &kp LS(EXCL)    &kp LS(AT)       &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &trans
&kp FSLH   &kp EQUAL  &kp UNDERSCORE  &kp SINGLE_QUOTE  &kp COMMA  &kp DOT  &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LBKT       &kp RBKT      &kp QUESTION   &trans
&kp STAR   &trans     &trans          &trans            &trans     &trans                   &trans          &trans           &trans         &trans        &trans         &trans
            >;
        };
    };
};


