/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7
#define APPS   8

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 18

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        cb_enter {
            bindings = <&kp RET>;
            key-positions = <21 19>;
            layers = <0>;
            timeout-ms = <50>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
            timeout-ms = <50>;
        };

        backword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <15 14>;
            timeout-ms = <50>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <14 16>;
            timeout-ms = <50>;
        };

        cb_minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        cp_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <32 33>;
            timeout-ms = <50>;
        };

        cb_cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            timeout-ms = <50>;
        };

        cb_copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            timeout-ms = <50>;
        };

        cb_paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        cb_paste_list {
            bindings = <&kp LS(LG(V))>;
            key-positions = <28 29>;
            timeout-ms = <50>;
        };

        cb_cmd_w {
            bindings = <&kp LG(W)>;
            key-positions = <1 2>;
            timeout-ms = <50>;
        };

        cb_cmd_a {
            bindings = <&kp LG(A)>;
            key-positions = <13 16>;
            timeout-ms = <50>;
        };

        cb_mouse_left_click_2 {
            bindings = <&mkp MB1>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        cb_cmd_t {
            bindings = <&kp LG(T)>;
            key-positions = <5 4>;
            timeout-ms = <50>;
        };

        cb_caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
            timeout-ms = <50>;
        };

        cb_bt_0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <24 12>;
            require-prior-idle-ms = <1000>;
            timeout-ms = <50>;
        };

        cb_bt_1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <38 24>;
            require-prior-idle-ms = <1000>;
            timeout-ms = <50>;
        };

        cb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        cb_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 28>;
            timeout-ms = <50>;
        };

        cb_delete_word {
            bindings = <&kp LA(DELETE)>;
            key-positions = <16 15 14>;
            timeout-ms = <50>;
        };

        cb_mouse_left_click {
            bindings = <&mkp LCLK>;
            key-positions = <6 7>;
            require-prior-idle-ms = <500>;
            timeout-ms = <50>;
        };

        cb_mouse_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <6 8>;
            require-prior-idle-ms = <500>;
            timeout-ms = <50>;
        };

        cb_mouse_right_click {
            bindings = <&mkp RCLK>;
            key-positions = <7 8>;
            require-prior-idle-ms = <500>;
            timeout-ms = <50>;
        };

        cb_bluetooth_clear_profiles {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <0 12 24 38>;
            require-prior-idle-ms = <1000>;
            timeout-ms = <50>;
        };

        cb_screenshot {
            bindings = <&kp LS(LC(LG(NUMBER_4)))>;
            key-positions = <5 4 3>;
        };

        cb_left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <19 20>;
        };

        cb_right {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <20 21>;
        };

        cb_left_word {
            bindings = <&kp RA(LEFT_ARROW)>;
            key-positions = <33 34>;
        };

        cb_right_word {
            bindings = <&kp RA(RIGHT_ARROW)>;
            key-positions = <34 35>;
        };

        cb_control_r_reverse_search {
            bindings = <&kp LC(R)>;
            key-positions = <4 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE        &kp Q         &kp W         &kp E           &kp R  &kp T                    &kp Y          &kp U  &kp I            &kp O           &kp P         &kp BACKSPACE
&kp TAB           &kp A         &kp S         &kp D           &kp F  &kp G                    &kp H          &kp J  &kp K            &kp L           &kp SEMI      &mt RIGHT_SHIFT SQT
&kp LEFT_SHIFT    &kp Z         &kp X         &kp C           &kp V  &kp B      &none  &none  &kp N          &kp M  &kp COMMA        &kp DOT         &kp SLASH     &kp BACKSLASH
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &mo 2  &kp SPACE                &kp RIGHT_GUI  &mo 1  &kp RIGHT_SHIFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Navi_layer {
            display-name = "Navi";
            bindings = <
&kp GRAVE  &none  &none           &mmv MOVE_UP    &kp PAGE_UP      &kp PAGE_DOWN                   &mkp MB1                        &mkp MB3        &mkp MB2            &msc SCRL_UP         &msc SCRL_DOWN   &kp RS(RA(RC(RG(A))))
&trans     &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP                    &kp RS(RA(RC(RG(ENTER))))       &kp LEFT_ARROW  &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT_ARROW  &kp RG(RC(RA(RS(B))))
&trans     &none  &none           &none           &none            &msc SCRL_DOWN  &trans  &trans  &kp RS(RA(RC(RG(LEFT_ARROW))))  &kp RC(A)       &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)  &kp RC(E)        &kp RG(RC(RA(RS(C))))
&trans     &none  &none           &trans          &trans           &trans                          &trans                          &trans          &trans              &kp PAGE_DOWN        &kp PAGE_UP      &kp RG(RC(RA(RS(D))))
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Num {
            bindings = <
&kp MINUS  &kp N1     &kp N2          &kp N3     &kp N4     &kp N5                   &kp LS(CARET)   &kp LS(AMPS)     &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)      &trans
&kp PLUS   &kp N6     &kp N7          &kp N8     &kp N9     &kp N0                   &kp LS(EXCL)    &kp LS(AT)       &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)     &trans
&kp FSLH   &kp EQUAL  &kp UNDERSCORE  &kp GRAVE  &kp COMMA  &kp DOT  &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LBKT       &kp RBKT      &kp QUESTION      &trans
&kp STAR   &trans     &trans          &trans     &trans     &trans                   &trans          &trans           &trans         &kp RG(DOWN)  &kp RG(UP_ARROW)  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Apps_layer {
            display-name = "Apps";
            bindings = <
&trans  &trans                        &kp RS(RG(RC(RA(W))))  &kp RS(RG(RC(RA(E))))  &kp RS(RG(RC(RA(R))))  &kp RS(RG(RC(RA(T))))                   &kp RS(RG(RC(RA(Y))))     &trans                  &kp RS(RG(RC(RA(I))))      &kp RS(RG(RC(RA(O))))  &kp RS(RG(RC(RA(P))))     &trans
&trans  &kp RS(RG(RC(RA(A))))         &kp RS(RG(RC(RA(S))))  &kp RS(RG(RC(RA(D))))  &kp RS(RG(RC(RA(F))))  &kp RS(RG(RC(RA(G))))                   &kp LG(LBKT)              &kp LG(RBKT)            &kp RC(RA(LG(LEFT)))       &kp RC(RA(LG(RIGHT)))  &kp RC(RA(LG(UP)))        &kp RS(RG(RC(RA(ENTER))))
&trans  &trans                        &trans                 &kp RS(RG(RC(RA(C))))  &kp RS(RG(RC(RA(V))))  &kp RS(RG(RC(RA(B))))  &trans  &trans  &kp LC(RA(LG(LEFT_ARROW)))  &kp LC(RA(LG(DOWN)))  &kp LC(RA(LG(UP_ARROW)))  &kp LC(RA(LG(RIGHT)))  &kp RC(RA(LG(RETURN)))    &trans
&trans  &trans                        &trans                 &trans                 &trans                 &trans                                 &trans                    &trans                  &trans                     &trans                 &trans                    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
